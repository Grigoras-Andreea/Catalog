Index: src/main/java/org/example/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class Database {\r\n    final String url = \"jdbc:postgresql://localhost:5432/NoteCatalog\" ;\r\n    final String user = \"postgres\";\r\n    final String password = \"1q2w3e\";\r\n\r\n    /**\r\n     * Connect to the PostgreSQL database\r\n     *\r\n     * @return a Connection object\r\n     */\r\n    public Connection connect() throws SQLException {\r\n        return DriverManager.getConnection(url, user, password);\r\n    }\r\n    public void setLoggedInProfessorId(int professorId) {\r\n        this.profesorIDLogged = professorId;\r\n    }\r\n\r\n    private int profesorIDLogged;\r\n\r\n    public boolean checkIfUsernameExistsForStudent(String username) {\r\n        String sql = \"SELECT * FROM \\\"Student\\\" WHERE \\\"Username\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setString(1, username);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    // Username already exists\r\n                    return true;\r\n                } else {\r\n                    // Username does not exist\r\n                    return false;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean checkIfUsernameExistsForProfesor(String username) {\r\n        String sql = \"SELECT * FROM \\\"Profesor\\\" WHERE \\\"Username\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setString(1, username);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    // Username already exists\r\n                    return true;\r\n                } else {\r\n                    // Username does not exist\r\n                    return false;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean checkIfUsernameExists(String username) {\r\n        return checkIfUsernameExistsForStudent(username) || checkIfUsernameExistsForProfesor(username);\r\n    }\r\n\r\n\r\n    public void insertIntoStudent(int id, String nume, String Prenume, int an, String username, String parola){\r\n        String sql = \"INSERT INTO \\\"Student\\\"(\\\"ID_Student\\\", \\\"Nume\\\", \\\"Prenume\\\", \\\"An_Studii\\\", \\\"Username\\\", \\\"Parola\\\") VALUES(?,?,?,?,?,?)\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, id);\r\n            pstmt.setString(2, nume);\r\n            pstmt.setString(3, Prenume);\r\n            pstmt.setInt(4, an);\r\n            pstmt.setString(5, username);\r\n            pstmt.setString(6, parola);\r\n            pstmt.executeUpdate();\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void insertIntoProfesor(int id, String nume, String Prenume, String username, String parola){\r\n            String sql = \"INSERT INTO \\\"Profesor\\\"(\\\"ID_Profesor\\\", \\\"Nume\\\", \\\"Prenume\\\", \\\"Username\\\", \\\"Parola\\\") VALUES(?,?,?,?,?)\";\r\n            try (Connection conn = this.connect();\r\n                 PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n                pstmt.setInt(1, id);\r\n                pstmt.setString(2, nume);\r\n                pstmt.setString(3, Prenume);\r\n                pstmt.setString(4, username);\r\n                pstmt.setString(5, parola);\r\n                pstmt.executeUpdate();\r\n            } catch (SQLException e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n    }\r\n\r\n    public void insertNota(int idStudent, int ID_Disciplina, int nota) {\r\n        String sql = \"INSERT INTO \\\"Note\\\"(\\\"ID_Disciplina\\\",\\\"ID_Student\\\", \\\"Data\\\",\\\"Nota\\\") VALUES(?,?,?,?)\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, ID_Disciplina);\r\n            pstmt.setInt(2, idStudent);\r\n            pstmt.setTimestamp(3, new Timestamp(System.currentTimeMillis()));\r\n            pstmt.setInt(4, nota);\r\n\r\n            pstmt.executeUpdate();\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public int getLastIDFromDisciplina(){\r\n        String sql = \"SELECT * FROM \\\"Disciplina\\\" ORDER BY \\\"ID_Disciplina\\\" DESC LIMIT 1\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    return rs.getInt(\"ID_Disciplina\");\r\n                } else {\r\n                    return -1;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public void insertIntoDisciplina(int ID_Disciplina, double medie, int idProfesor, String numeDisciplina){\r\n        String sql = \"INSERT INTO \\\"Disciplina\\\"(\\\"ID_Disciplina\\\",\\\"Medie\\\",\\\"ID_Profesor\\\",\\\"Nume_disciplina\\\") VALUES(?,?,?,?)\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, ID_Disciplina);\r\n            pstmt.setDouble(2, medie);\r\n            pstmt.setInt(3, idProfesor);\r\n            pstmt.setString(4, numeDisciplina);\r\n            pstmt.executeUpdate();\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void insertDataFromFile(String filePath) {\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                // Assuming data in the file is comma-separated\r\n                String[] data = line.split(\",\");\r\n                // Assuming the data structure is: id, nume, prenume, an, username, parola\r\n                int id = Integer.parseInt(data[0]);\r\n                String nume = data[1];\r\n                String prenume = data[2];\r\n                int an = Integer.parseInt(data[3]);\r\n                String username = data[4];\r\n                String parola = data[5];\r\n\r\n                // Call the existing insertIntoStudent method to insert data into the database\r\n                insertIntoStudent(id, nume, prenume, an, username, parola);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public int studentLogIn(String username, String parola) {\r\n        String sql = \"SELECT * FROM \\\"Student\\\" WHERE \\\"Username\\\" = ? AND \\\"Parola\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setString(1, username);\r\n            pstmt.setString(2, parola);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    // Login successful, return the student ID\r\n                    return rs.getInt(\"ID_Student\");\r\n                } else {\r\n                    // Login failed\r\n                    return -1;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public int profesorLogIn(String username, String parola) {\r\n        String sql = \"SELECT * FROM \\\"Profesor\\\" WHERE \\\"Username\\\" = ? AND \\\"Parola\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setString(1, username);\r\n            pstmt.setString(2, parola);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    // Login successful, return the profesor ID\r\n                    int profesorId = rs.getInt(\"ID_Profesor\");\r\n                    return rs.getInt(\"ID_Profesor\");\r\n                } else {\r\n                    // Login failed\r\n                    return -1;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public int GetStudentLastID(){\r\n        String sql = \"SELECT * FROM \\\"Student\\\" ORDER BY \\\"ID_Student\\\" DESC LIMIT 1\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n\r\n                    return rs.getInt(\"ID_Student\");\r\n                } else {\r\n\r\n                    return -1;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public int GetProfesorLastID(){\r\n        String sql = \"SELECT * FROM \\\"Profesor\\\" ORDER BY \\\"ID_Profesor\\\" DESC LIMIT 1\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n\r\n                    return rs.getInt(\"ID_Profesor\");\r\n                } else {\r\n\r\n                    return -1;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return -1;\r\n        }\r\n    }\r\n    public void showStudentGrades(int studentId) {\r\n        String sql = \"SELECT D.\\\"Nume_disciplina\\\" AS Subject, N.\\\"Nota\\\" AS Grade, N.\\\"Data\\\" AS Date \" +\r\n                \"FROM \\\"Note\\\" N \" +\r\n                \"JOIN \\\"Disciplina\\\" D ON N.\\\"ID_Disciplina\\\" = D.\\\"ID_Disciplina\\\" \" +\r\n                \"WHERE N.\\\"ID_Student\\\" = ?\";\r\n\r\n\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, studentId);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                while (rs.next()) {\r\n                    String subject = rs.getString(\"Subject\");\r\n                    int grade = rs.getInt(\"Grade\");\r\n                    Timestamp date = rs.getTimestamp(\"Date\");\r\n\r\n                    System.out.println(\"Subject: \" + subject + \", Grade: \" + grade + \", Date: \" + date);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n    public void showAverage(int studentId) {\r\n        String sql = \"SELECT AVG(\\\"Nota\\\") AS Average \" +\r\n                \"FROM \\\"Note\\\" \" +\r\n                \"WHERE \\\"ID_Student\\\" = ?\";\r\n\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, studentId);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    double average = rs.getDouble(\"Average\");\r\n\r\n                    System.out.println(\"Media: \" + average);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n    public void showDisciplines(int studentId) {\r\n        String sql = \"SELECT D.\\\"Nume_disciplina\\\" AS Subject \" +\r\n                \"FROM \\\"Note\\\" N \" +\r\n                \"JOIN \\\"Disciplina\\\" D ON N.\\\"ID_Disciplina\\\" = D.\\\"ID_Disciplina\\\" \" +\r\n                \"WHERE N.\\\"ID_Student\\\" = ? \" +\r\n                \"GROUP BY D.\\\"Nume_disciplina\\\"\";\r\n\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, studentId);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                while (rs.next()) {\r\n                    String subject = rs.getString(\"Subject\");\r\n\r\n                    System.out.println(\"Subject: \" + subject);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n    public boolean checkIfProfesorCanGradeDisciplina(int idDisciplina) {\r\n        String sql = \"SELECT * FROM \\\"Disciplina\\\" WHERE \\\"ID_Disciplina\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, idDisciplina);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    // Disciplina exists\r\n                    int idProfesor = rs.getInt(\"ID_Profesor\");\r\n                    if (idProfesor == profesorIDLogged) {\r\n                        // Profesorul poate sa puna nota la disciplina respectiva\r\n                        return true;\r\n                    } else {\r\n                        // Profesorul nu poate sa puna nota la disciplina respectiva\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    // Disciplina does not exist\r\n                    return false;\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    public void puneNotaStudentilor(int idDisciplina, int idStudent, int nota) {\r\n        // Verifica daca profesorul respectiv poate sa puna nota la disciplina respectiva\r\n        if (checkIfProfesorCanGradeDisciplina(idDisciplina)) {\r\n            // Verifica daca studentul exista\r\n            if (checkIfStudentExists(idStudent)) {\r\n                // Insereaza nota in baza de date\r\n                insertNota(idStudent, idDisciplina, nota);\r\n                System.out.println(\"Nota a fost pusa cu succes!\");\r\n            } else {\r\n                System.out.println(\"Studentul nu exista!\");\r\n            }\r\n        } else {\r\n            // Profesorul nu poate sa puna nota\r\n            System.out.println(\"Profesorul nu poate sa puna nota la aceasta disciplina!\");\r\n        }\r\n    }\r\n    boolean checkIfStudentExists(int idStudent) {\r\n        String sql = \"SELECT * FROM \\\"Student\\\" WHERE \\\"ID_Student\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, idStudent);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                return rs.next();\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n    public void ShowAverageCurs(int idDisciplina) {\r\n        String sql = \"SELECT AVG(\\\"Nota\\\") AS Average \" +\r\n                \"FROM \\\"Note\\\" \" +\r\n                \"WHERE \\\"ID_Disciplina\\\" = ?\";\r\n\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, idDisciplina);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    double average = rs.getDouble(\"Average\");\r\n\r\n                    System.out.println(\"Media: \" + average);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n    public void showStudents(int idDisciplina) {\r\n        String sql = \"SELECT S.\\\"Nume\\\" AS Nume, S.\\\"Prenume\\\" AS Prenume \" +\r\n                \"FROM \\\"Note\\\" N \" +\r\n                \"JOIN \\\"Student\\\" S ON N.\\\"ID_Student\\\" = S.\\\"ID_Student\\\" \" +\r\n                \"WHERE N.\\\"ID_Disciplina\\\" = ? \" +\r\n                \"GROUP BY S.\\\"Nume\\\", S.\\\"Prenume\\\"\";\r\n        List<String> studentList = new ArrayList<>();\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, idDisciplina);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                while (rs.next()) {\r\n                    String nume = rs.getString(\"Nume\");\r\n                    String prenume = rs.getString(\"Prenume\");\r\n\r\n                    System.out.println( nume + \" \" + prenume);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n        // Afisarea studentilor\r\n        System.out.println(\"Studenti:\");\r\n        studentList.forEach(System.out::println);\r\n\r\n        // Verificare daca utilizatorul doreste sortare\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Doriti sa sortati alfabetic? (Da/Nu)\");\r\n        String optiuneSortare = scanner.nextLine();\r\n\r\n        if (\"Da\".equalsIgnoreCase(optiuneSortare)) {\r\n            // Utilizare stream pentru sortare alfabetica\r\n            List<String> studentiSortati = studentList.stream()\r\n                    .sorted()\r\n                    .collect(Collectors.toList());\r\n\r\n            // Afisare studenti sortati\r\n            System.out.println(\"Studenti sortati alfabetic:\");\r\n            studentiSortati.forEach(System.out::println);\r\n        } else {\r\n            // Continuare cu meniul sau alte operatii\r\n            System.out.println(\"Continuare cu meniul sau alte operatii...\");\r\n        }\r\n    }\r\n\r\n    public void showProfesorDisciplines(int profesorId) {\r\n        String sql = \"SELECT \\\"ID_Disciplina\\\", \\\"Nume_disciplina\\\" FROM \\\"Disciplina\\\" WHERE \\\"ID_Profesor\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, profesorId);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                while (rs.next()) {\r\n                    int idDisciplina = rs.getInt(\"ID_Disciplina\");\r\n                    String disciplina = rs.getString(\"Nume_disciplina\");\r\n                    System.out.println(\"ID: \" + idDisciplina + \", Disciplina: \" + disciplina);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public boolean checkIfProfesorTeachesDisciplina(int idDisciplina, int id) {\r\n        String sql = \"SELECT * FROM \\\"Disciplina\\\" WHERE \\\"ID_Disciplina\\\" = ? AND \\\"ID_Profesor\\\" = ?\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            pstmt.setInt(1, idDisciplina);\r\n            pstmt.setInt(2, id);\r\n\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                return rs.next();\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void showStudents() {\r\n        String sql = \"SELECT * FROM \\\"Student\\\"\";\r\n        try (Connection conn = this.connect();\r\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n            try (ResultSet rs = pstmt.executeQuery()) {\r\n                while (rs.next()) {\r\n                    int id = rs.getInt(\"ID_Student\");\r\n                    String nume = rs.getString(\"Nume\");\r\n                    String prenume = rs.getString(\"Prenume\");\r\n\r\n                    System.out.println(\"ID: \" + id + \", Nume: \" + nume + \", Prenume: \" + prenume);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Database.java b/src/main/java/org/example/Database.java
--- a/src/main/java/org/example/Database.java	(revision 082db7f41d026d574022c71419abc9daf3e8769f)
+++ b/src/main/java/org/example/Database.java	(date 1707245802142)
@@ -106,14 +106,32 @@
             }
     }
 
+    private int getNotaLastID(){
+        String sql = "SELECT * FROM \"Note\" ORDER BY \"ID_Nota\" DESC LIMIT 1";
+        try (Connection conn = this.connect();
+             PreparedStatement pstmt = conn.prepareStatement(sql)) {
+            try (ResultSet rs = pstmt.executeQuery()) {
+                if (rs.next()) {
+                    return rs.getInt("ID_Nota");
+                } else {
+                    return -1;
+                }
+            }
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+            return -1;
+        }
+    }
+
     public void insertNota(int idStudent, int ID_Disciplina, int nota) {
-        String sql = "INSERT INTO \"Note\"(\"ID_Disciplina\",\"ID_Student\", \"Data\",\"Nota\") VALUES(?,?,?,?)";
+        String sql = "INSERT INTO \"Note\"(\"ID_Nota\",\"ID_Disciplina\",\"ID_Student\", \"Data\",\"Nota\") VALUES(?,?,?,?,?)";
         try (Connection conn = this.connect();
              PreparedStatement pstmt = conn.prepareStatement(sql)) {
-            pstmt.setInt(1, ID_Disciplina);
-            pstmt.setInt(2, idStudent);
-            pstmt.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
-            pstmt.setInt(4, nota);
+            pstmt.setInt(1, getNotaLastID()+1);
+            pstmt.setInt(2, ID_Disciplina);
+            pstmt.setInt(3, idStudent);
+            pstmt.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
+            pstmt.setInt(5, nota);
 
             pstmt.executeUpdate();
         } catch (SQLException e) {
@@ -498,6 +516,8 @@
             System.out.println(e.getMessage());
         }
     }
+
+
 }
 
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ed1e95a4-aedb-4c56-bdef-26614b70a25a\" name=\"Changes\" comment=\"completed student menu\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/App.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/App.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2bBCcAPeFIuoRvDLvOzO09fzQvw\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;postgresql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ed1e95a4-aedb-4c56-bdef-26614b70a25a\" name=\"Changes\" comment=\"\" />\r\n      <created>1705679163741</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1705679163741</updated>\r\n      <workItem from=\"1705679164635\" duration=\"428000\" />\r\n      <workItem from=\"1705842039988\" duration=\"536000\" />\r\n      <workItem from=\"1705842592150\" duration=\"3123000\" />\r\n      <workItem from=\"1705867168884\" duration=\"1365000\" />\r\n      <workItem from=\"1706272696959\" duration=\"5138000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"not working db\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705686439581</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705686439581</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"working db\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705687608792</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705687608792</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"citire din fisier db si fisier text\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705845122120</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705845122120</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"made log-in for student and professor\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705925435048</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705925435048</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"moved some functions and started menu\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705926872972</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705926872972</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"added some other functions for database and continued menu\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705928518431</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705928518431</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"added menu for the student in app.java, and showStudentsGrades in database.java\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1706005384161</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706005384161</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"completed student menu\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1706273611020</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706273611020</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"9\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"not working db\" />\r\n    <MESSAGE value=\"working db\" />\r\n    <MESSAGE value=\"citire din fisier db si fisier text\" />\r\n    <MESSAGE value=\"made log-in for student and professor\" />\r\n    <MESSAGE value=\"moved some functions and started menu\" />\r\n    <MESSAGE value=\"added some other functions for database and continued menu\" />\r\n    <MESSAGE value=\"added menu for the student in app.java, and showStudentsGrades in database.java\" />\r\n    <MESSAGE value=\"completed student menu\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"completed student menu\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 082db7f41d026d574022c71419abc9daf3e8769f)
+++ b/.idea/workspace.xml	(date 1707245545908)
@@ -4,8 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ed1e95a4-aedb-4c56-bdef-26614b70a25a" name="Changes" comment="completed student menu">
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/App.java" afterDir="false" />
+    <list default="true" id="ed1e95a4-aedb-4c56-bdef-26614b70a25a" name="Changes" comment=".">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Database.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -129,7 +130,15 @@
       <option name="project" value="LOCAL" />
       <updated>1706273611020</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary=".">
+      <option name="closed" value="true" />
+      <created>1707244455922</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1707244455922</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -155,7 +164,8 @@
     <MESSAGE value="added some other functions for database and continued menu" />
     <MESSAGE value="added menu for the student in app.java, and showStudentsGrades in database.java" />
     <MESSAGE value="completed student menu" />
-    <option name="LAST_COMMIT_MESSAGE" value="completed student menu" />
+    <MESSAGE value="." />
+    <option name="LAST_COMMIT_MESSAGE" value="." />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
